name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff app/ tests/
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff app/ tests/
    
    - name: Linting (flake8)
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking (mypy)
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional
    
    - name: Security analysis (Bandit)
      run: |
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency vulnerability check (Safety)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Tests
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
        WTF_CSRF_ENABLED: false
      run: |
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
        echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
        echo "FLASK_ENV=$FLASK_ENV" >> $GITHUB_ENV
        echo "WTF_CSRF_ENABLED=$WTF_CSRF_ENABLED" >> $GITHUB_ENV
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --junitxml=junit-unit.xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --junitxml=junit-integration.xml
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=70
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build and Security Scan
  docker:
    runs-on: ubuntu-latest
    name: Docker Build & Security
    needs: [code-quality, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: stock-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'stock-app:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance and Load Testing
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: perf_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/perf_test_db
        SECRET_KEY: perf-test-secret-key
      run: |
        pytest tests/ -k "benchmark" --benchmark-json=benchmark.json
      continue-on-error: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark.json

  # Build and Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [code-quality, test, docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stock-app-staging
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Deploy to ECS Staging
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stock-app-staging
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster stock-app-staging \
          --service stock-app-service \
          --force-new-deployment
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to complete
        sleep 60
        # Run basic health checks
        curl -f https://staging.stockanalysis.com/api/health || exit 1

  # Production Deployment (Manual Approval)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [code-quality, test, docker, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stock-app-production
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Blue-Green Deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stock-app-production
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create new task definition with new image
        aws ecs register-task-definition \
          --family stock-app-production \
          --container-definitions '[{
            "name": "stock-app",
            "image": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':'$IMAGE_TAG'",
            "memory": 2048,
            "cpu": 1024,
            "essential": true,
            "portMappings": [{
              "containerPort": 5000,
              "protocol": "tcp"
            }],
            "environment": [
              {"name": "FLASK_ENV", "value": "production"},
              {"name": "DATABASE_URL", "value": "'${{ secrets.DATABASE_URL }}'"},
              {"name": "SECRET_KEY", "value": "'${{ secrets.SECRET_KEY }}'"}
            ]
          }]'
        
        # Update service with new task definition
        aws ecs update-service \
          --cluster stock-app-production \
          --service stock-app-service \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster stock-app-production \
          --services stock-app-service
    
    - name: Run production health checks
      run: |
        curl -f https://stockanalysis.com/api/health || exit 1
        curl -f https://stockanalysis.com/api/stocks || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'Production deployment successful! :rocket:'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: 'Production deployment failed! :x:'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old artifacts
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Delete old ECR images
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Cleanup ECR repository
      run: |
        # Keep only last 10 images
        aws ecr list-images \
          --repository-name stock-app-production \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[:-10]' \
          --output json | \
        jq '.[] | select(.imageDigest != null)' | \
        aws ecr batch-delete-image \
          --repository-name stock-app-production \
          --image-ids file:///dev/stdin || true