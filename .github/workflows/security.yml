name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-security-report.json
        bandit -r app/ -f txt
      continue-on-error: true
    
    - name: Run Safety check for known vulnerabilities
      run: |
        safety check --json --output safety-security-report.json
        safety check
      continue-on-error: true
    
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json
        semgrep --config=auto app/
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-reports
        path: |
          bandit-security-report.json
          safety-security-report.json
          semgrep-report.json
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    runs-on: ubuntu-latest
    name: Docker Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t stock-app-security:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'stock-app-security:latest'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
    
    - name: Run Docker Bench for Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security
      continue-on-error: true

  dependency-audit:
    runs-on: ubuntu-latest
    name: Dependency Audit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        pip install --upgrade pip-tools
        pip list --outdated --format=json > outdated-packages.json
        pip list --outdated
      continue-on-error: true
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-audit-reports
        path: |
          pip-audit-report.json
          outdated-packages.json

  secrets-scan:
    runs-on: ubuntu-latest
    name: Secrets Detection
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}
    
    - name: Detect hardcoded secrets
      run: |
        # Check for common secret patterns
        echo "Checking for potential secrets..."
        
        # API keys
        grep -r "api[_-]key\s*=" . --exclude-dir=.git --exclude-dir=node_modules || true
        grep -r "apikey\s*=" . --exclude-dir=.git --exclude-dir=node_modules || true
        
        # Database URLs with credentials
        grep -r "postgresql://.*:.*@" . --exclude-dir=.git --exclude-dir=node_modules || true
        grep -r "mysql://.*:.*@" . --exclude-dir=.git --exclude-dir=node_modules || true
        
        # JWT secrets
        grep -r "jwt[_-]secret" . --exclude-dir=.git --exclude-dir=node_modules || true
        
        # AWS credentials
        grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=.git --exclude-dir=node_modules || true
        
        echo "Secrets scan completed"

  license-compliance:
    runs-on: ubuntu-latest
    name: License Compliance Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=table
        
        # Check for GPL licenses (if not compatible with your project)
        pip-licenses | grep -i gpl && echo "WARNING: GPL licenses found" || echo "No GPL licenses found"
      continue-on-error: true
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-compliance-report
        path: licenses.json

  security-summary:
    runs-on: ubuntu-latest
    name: Security Summary
    needs: [security-audit, docker-security, dependency-audit, secrets-scan, license-compliance]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Audit Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check if critical issues were found
        if [ -f "security-audit-reports/bandit-security-report.json" ]; then
          echo "- Bandit scan: Completed" >> security-summary.md
        fi
        
        if [ -f "security-audit-reports/safety-security-report.json" ]; then
          echo "- Safety check: Completed" >> security-summary.md
        fi
        
        if [ -f "dependency-audit-reports/pip-audit-report.json" ]; then
          echo "- Dependency audit: Completed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        
        cat security-summary.md
    
    - name: Create issue for security findings
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Audit Found Issues - ' + new Date().toISOString().split('T')[0],
            body: 'Automated security audit found potential security issues. Please review the workflow artifacts for details.',
            labels: ['security', 'automated']
          })